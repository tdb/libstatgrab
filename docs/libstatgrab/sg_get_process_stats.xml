<?xml version="1.0"?>

<refentry id="sg_get_process_stats">

  <refmeta>
    <refentrytitle>sg_get_process_stats</refentrytitle>
    <manvolnum>3</manvolnum>
    <refmiscinfo>i-scream</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname>sg_get_process_stats</refname>
    <refname>sg_get_process_stats_r</refname>
    <refname>sg_get_process_count</refname>
    <refname>sg_get_process_count_of</refname>
    <refname>sg_get_process_count_r</refname>
    <refname>sg_free_process_count</refname>
    <refname>sg_process_compare_name</refname>
    <refname>sg_process_compare_pid</refname>
    <refname>sg_process_compare_uid</refname>
    <refname>sg_process_compare_gid</refname>
    <refname>sg_process_compare_size</refname>
    <refname>sg_process_compare_res</refname>
    <refname>sg_process_compare_cpu</refname>
    <refname>sg_process_compare_time</refname>
    <refpurpose>get process statistics</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>#include &lt;statgrab.h&gt;</funcsynopsisinfo>
      <funcprototype>
        <funcdef>sg_process_stats *<function>sg_get_process_stats</function></funcdef>
        <paramdef>size_t *<parameter>entries</parameter></paramdef>
      </funcprototype>
      <funcprototype>
        <funcdef>sg_process_stats *<function>sg_get_process_stats_r</function></funcdef>
        <paramdef>size_t *<parameter>entries</parameter></paramdef>
      </funcprototype>
      <funcprototype>
        <funcdef>sg_error <function>sg_free_process_stats</function></funcdef>
        <paramdef>sg_process_stats *<parameter>data</parameter></paramdef>
      </funcprototype>

      <funcprototype>
        <funcdef>sg_process_count *<function>sg_get_process_count</function></funcdef>
        <void/>
      </funcprototype>
      <funcprototype>
        <funcdef>sg_process_count *<function>sg_get_process_count_of</function></funcdef>
        <paramdef>sg_process_count_source <parameter>pcs</parameter></paramdef>
      </funcprototype>
      <funcprototype>
        <funcdef>sg_process_count *<function>sg_get_process_count_r</function></funcdef>
        <paramdef>sg_process_stats const *<parameter>whereof</parameter></paramdef>
      </funcprototype>
      <funcprototype>
        <funcdef>sg_error <function>sg_free_process_count</function></funcdef>
        <paramdef>sg_process_count *<parameter>data</parameter></paramdef>
      </funcprototype>

      <funcprototype>
      	<funcdef>int <function>sg_process_compare_name</function></funcdef>
	<paramdef>const void *<parameter>va</parameter></paramdef>
	<paramdef>const void *<parameter>vb</parameter></paramdef>
      </funcprototype>
      <funcprototype>
      	<funcdef>int <function>sg_process_compare_pid</function></funcdef>
	<paramdef>const void *<parameter>va</parameter></paramdef>
	<paramdef>const void *<parameter>vb</parameter></paramdef>
      </funcprototype>
      <funcprototype>
      	<funcdef>int <function>sg_process_compare_uid</function></funcdef>
	<paramdef>const void *<parameter>va</parameter></paramdef>
	<paramdef>const void *<parameter>vb</parameter></paramdef>
      </funcprototype>
      <funcprototype>
      	<funcdef>int <function>sg_process_compare_gid</function></funcdef>
	<paramdef>const void *<parameter>va</parameter></paramdef>
	<paramdef>const void *<parameter>vb</parameter></paramdef>
      </funcprototype>
      <funcprototype>
      	<funcdef>int <function>sg_process_compare_size</function></funcdef>
	<paramdef>const void *<parameter>va</parameter></paramdef>
	<paramdef>const void *<parameter>vb</parameter></paramdef>
      </funcprototype>
      <funcprototype>
      	<funcdef>int <function>sg_process_compare_res</function></funcdef>
	<paramdef>const void *<parameter>va</parameter></paramdef>
	<paramdef>const void *<parameter>vb</parameter></paramdef>
      </funcprototype>
      <funcprototype>
      	<funcdef>int <function>sg_process_compare_cpu</function></funcdef>
	<paramdef>const void *<parameter>va</parameter></paramdef>
	<paramdef>const void *<parameter>vb</parameter></paramdef>
      </funcprototype>
      <funcprototype>
      	<funcdef>int <function>sg_process_compare_time</function></funcdef>
	<paramdef>const void *<parameter>va</parameter></paramdef>
	<paramdef>const void *<parameter>vb</parameter></paramdef>
      </funcprototype>

    </funcsynopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
      The <function>sg_get_process_stats</function> functions provide
      statistics about the currently running processes. Both functions,
      <function>sg_get_process_stats</function>() and
      <function>sg_get_process_stats_r</function>(), take an optional
      <parameter>entries</parameter> parameter, which points
      (when given) to a size_t to take the number of returned vector
      entries.
    </para>
    <para>
      The functions <function>sg_get_process_count_of</function>() and
      <function>sg_get_process_count_r</function>() provide an aggregated
      view of the process table - they deliver the amount of processes
      per process state. The <function>sg_get_process_count</function>()
      is in fact a preprocessor macro for backward compatibility and calls
      <function>sg_get_process_count_of</function>() with the parameter
      <parameter>pcs</parameter> of sg_entire_process_count to emulate
      the behavior until 0.17.
    </para>
    <para>
      <table frame='all'><title>API Shortcut</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
        <colspec colname='function'/>
        <colspec colname='returns'/>
        <colspec colname='data owner'/>
      <thead>
      <row>
        <entry>function</entry>
        <entry>returns</entry>
        <entry>data owner</entry>
      </row>
      </thead>
      <tbody>
      <row>
        <entry>sg_get_process_stats</entry>
        <entry><structname>sg_process_stats</structname> *</entry>
        <entry>libstatgrab (thread local)</entry>
      </row>
      <row>
        <entry>sg_get_process_stats_r</entry>
        <entry><structname>sg_process_stats</structname> *</entry>
        <entry>caller</entry>
      </row>
      <row>
        <entry>sg_get_process_count_of</entry>
        <entry><structname>sg_process_count</structname> *</entry>
        <entry>libstatgrab (thread local)</entry>
      </row>
      <row>
        <entry>sg_get_process_count_r</entry>
        <entry><structname>sg_process_count</structname> *</entry>
        <entry>caller</entry>
      </row>
      </tbody>
      </tgroup>
      </table>
    </para>
    <para>
      The <structname>sg_process_stats</structname> vectors received from
      <function>sg_get_process_stats_r</function>() or the
      <structname>sg_process_count</structname> summaries received from
      <function>sg_get_process_count_r</function> must be
      freed using <function>sg_free_process_stats</function>() or
      <function>sg_free_process_count</function>(), respectively.
      The caller is responsible for doing it when the data isn't needed
      any more.
    </para>
    <!--
    <para>
      The <function>sg_get_process_stats</function> takes a pointer to
      an int, <parameter>entries</parameter>, which is filled with the
      number of processes the snapshot contains. The return value is a
      pointer to the first member of an array of
      <structname>sg_process_stats</structname> structures; the number
      of entries in the array is returned in
      <parameter>entries</parameter>.
    </para>
    <para>
      <function>sg_get_process_count</function> returns a pointer to a
      static buffer of type <structname>sg_process_count</structname>.
    </para>
    <para>
      These two functions provide information on the process running
      on the system. In the first case lots of detail is provided, and
      in the second case a summary of the states of the current processes.
    </para>
    -->
    <para>
      <simplelist type="vert">
        <member><function>sg_process_compare_name</function></member>
        <member><function>sg_process_compare_pid</function></member>
        <member><function>sg_process_compare_uid</function></member>
        <member><function>sg_process_compare_gid</function></member>
        <member><function>sg_process_compare_size</function></member>
        <member><function>sg_process_compare_res</function></member>
        <member><function>sg_process_compare_cpu</function></member>
        <member><function>sg_process_compare_time</function></member>
      </simplelist>
    </para>
    <para>
      These functions compare two sg_process_stats entries, and return an
      int to represent which one is greater. The main use of these functions
      is to be passed to qsort to sort the sg_process_stats by the given type.
      <example>
        <title>Example</title>
        <programlisting>
size_t entries;
sg_process_stats *proc_stats = NULL;
while( NULL != ( proc_stats = sg_get_process_stats_r(&amp;entries) ) ) {
    /* order entries by comparing the process identifier */
    qsort( proc_stats, entries, sizeof(proc_stats[0]), &amp;sg_process_compare_pid );
    show_proc_stats( proc_stats );
    sg_free_process_stats( proc_stats );
}
        </programlisting>
      </example>
    </para>

  </refsect1>

  <refsect1>
    <title>Return Values</title>

    <para>
      The structure returned by sg_get_process_stats is of type
      <structname>sg_process_stats</structname>.
    </para>

    <programlisting>
typedef struct {
        char *process_name;
        char *proctitle;

        pid_t pid;    /* process identifier */
        pid_t parent; /* Parent pid */
        pid_t pgid;   /* process id of process group leader */
        pid_t sessid; /* session id of the session the process belongs to */

        uid_t uid;
        uid_t euid;
        gid_t gid;
        gid_t egid;

        unsigned long long context_switches;
        unsigned long long voluntary_context_switches;
        unsigned long long involuntary_context_switches;
        unsigned long long proc_size; /* in bytes */
        unsigned long long proc_resident; /* in bytes */
        time_t start_time; /* When was the process started */
        time_t time_spent; /* time running in seconds */
        double cpu_percent;
        int nice;
        sg_process_state state;

        time_t systime;
} sg_process_stats;
    </programlisting>

    <programlisting>
typedef enum {
        SG_PROCESS_STATE_RUNNING,
        SG_PROCESS_STATE_SLEEPING,
        SG_PROCESS_STATE_STOPPED,
        SG_PROCESS_STATE_ZOMBIE,
        SG_PROCESS_STATE_UNKNOWN
} sg_process_state;
    </programlisting>

    <variablelist>
      <varlistentry>
        <term><structfield>process_name</structfield></term>
        <listitem>
          <para>
            The name of the command that was run. The content of this
            field heavily depends on the underlying operating system,
            some store the basename the executable passes to
            the <function>exec</function>(2) system call, some the entire
            path. Most OS restrict the size of this field - some like
            the *BSD family to a very low value of 15 bytes.
          </para>
          <para>
            This field is usually immutable for userland processes.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>proctitle</structfield></term>
        <listitem>
          <para>
            The command line (the "title") of the process. Take
            note - this can be modified by the process, so isn't
            guaranteed to be the original command line.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>pid</structfield></term>
        <listitem>
          <para>
            The process ID.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>parent</structfield></term>
        <listitem>
          <para>
            The parent process ID.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>pgid</structfield></term>
        <listitem>
          <para>
            The process ID of the process group leader.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>sessid</structfield></term>
        <listitem>
          <para>
            Session id of the session the process belongs to.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>uid</structfield></term>
        <listitem>
          <para>
            The ID of the user the process is running as.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>euid</structfield></term>
        <listitem>
          <para>
            The ID of the effective user the process is running as.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>gid</structfield></term>
        <listitem>
          <para>
            The ID of the group the process is running as.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>egid</structfield></term>
        <listitem>
          <para>
            The ID of the effective group the process is running as.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>context_switches</structfield></term>
        <listitem>
          <para>
            The number of context switches of this process (voluntary and involuntary).
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>voluntary_context_switches</structfield></term>
        <listitem>
          <para>
            The number of voluntary context switches of this process (eg.
            by calling <function>sched_yield</function>() or <function>sleep</function>()).
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>involuntary_context_switches</structfield></term>
        <listitem>
          <para>
            The number of involuntary context switches of this process (eg.
            time slice exhausted or signal sent).
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>proc_size</structfield></term>
        <listitem>
          <para>
            The virtual memory size of the process in bytes.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>proc_resident</structfield></term>
        <listitem>
          <para>
            The size of the process that's resident in memory.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>start_time</structfield></term>
        <listitem>
          <para>
            The time when the process has been started in seconds since
            epoch.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>time_spent</structfield></term>
        <listitem>
          <para>
            The number of seconds the process has been running (user+system
            time, without time spent by child processes).
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>cpu_percent</structfield></term>
        <listitem>
          <para>
            The current percentage of CPU the process is using.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>nice</structfield></term>
        <listitem>
          <para>
            The nice value of the process.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>state</structfield></term>
        <listitem>
          <para>
            The current state of the process. See sg_process_state
            for permitted values.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>systime</structfield></term>
        <listitem>
          <para>
            The time in seconds since epoch of the moment where the present
            statistic has been created. This might be (but doesn't have to
            be) the same moment for all returned entries, regardless whether
            they're fetched with one snapshot or puzzled from some kind of
            procfs.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>
      The structure returned by sg_get_process_count_of and
      sg_get_process_count_r is of type
      <structname>sg_process_count</structname>.
    </para>

    <programlisting>
typedef enum sg_process_count_source {
        sg_entire_process_count,
        sg_last_process_count
} sg_process_count_source;
    </programlisting>

    <programlisting>
typedef struct{
        unsigned long long total;
        unsigned long long running;
        unsigned long long sleeping;
        unsigned long long stopped;
        unsigned long long zombie;
        unsigned long long unknown;

        time_t systime;
}sg_process_count;
    </programlisting>

    <variablelist>
      <varlistentry>
        <term><structfield>total</structfield></term>
        <listitem>
          <para>
            The total number of processes.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>running</structfield></term>
        <listitem>
          <para>
            The number of running processes.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>sleeping</structfield></term>
        <listitem>
          <para>
            The number of sleeping processes.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>stopped</structfield></term>
        <listitem>
          <para>
            The number of stopped processes.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>zombie</structfield></term>
        <listitem>
          <para>
            The number of zombie processes.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>unknown</structfield></term>
        <listitem>
          <para>
            The number of processes not matching any of above named categories.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>systime</structfield></term>
        <listitem>
          <para>
            The time in seconds since epoch of the moment where the present
            statistic has been created.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Bugs</title>
    <para>
      The very first call of
      <function>sg_get_process_count_of</function>(sg_last_process_count)
      will return the same as
      <function>sg_get_process_count_of</function>(sg_entire_process_count).
    </para>
    <para>
      The compare functions exist rather for backward compatibility than
      for functionality enhancements. Limited flexibility (e.g. reverse
      order) and lack of optimising opportunities for the compiler leads
      to the recommendation to implement the required compare routines
      locally.
    </para>
  </refsect1>

  <refsect1>
    <title>See Also</title>

    <simplelist type="inline">
      <member>
        <citerefentry>
          <refentrytitle>statgrab</refentrytitle>
          <manvolnum>3</manvolnum>
        </citerefentry>
      </member>
    </simplelist>
  </refsect1>

  <refsect1>
    <title>Website</title>

    <simplelist type="vert">
      <member>
        <ulink url="http://www.i-scream.org/libstatgrab/">
          http://www.i-scream.org/libstatgrab/
        </ulink>
      </member>
    </simplelist>
  </refsect1>

</refentry>
